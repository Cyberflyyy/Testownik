generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model UserStats {
  id             String   @id @default(cuid())
  userId         String   @unique
  completedTests Int      @default(0)
  totalScore     Float    @default(0)
  averageScore   Float    @default(0)
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  tests         Test[]
  weeklyTestTimes WeeklyTestTime[]
  stats UserStats?

}
model WeeklyTestTime {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  weekStart DateTime
  totalTime Int      // Ca≈Çkowity czas w sekundach
  updatedAt DateTime @updatedAt

  @@unique([userId, weekStart])
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id             Int      @id @default(autoincrement())
  userId         String
  answers        String[]
  correctAnswers Int[]
  name           String?
  question       String
  user           User     @relation(fields: [userId], references: [id])
  testId         Int
  test           Test     @relation(fields: [testId], references: [id])
}

model Test {
  id        Int        @id @default(autoincrement())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  questions Question[]
  createdAt DateTime   @default(now())
}